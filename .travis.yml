language: bash

matrix:
  include:
    # macos
    - os: osx
      language: node_js
      node_js:
        - "lts/*"

    # windows
    - os: windows
      language: node_js
      node_js:
        - "lts/*"

    # linux
    - os: linux
      env: BASE_IMAGE=library/alpine QEMU_ARCH=x86_64 DOCKERFILE="Dockerfile.alpine"
      services:
        - docker
    - os: linux
      env: BASE_IMAGE=arm32v6/alpine QEMU_ARCH=arm DOCKERFILE="Dockerfile.alpine"
      services:
        - docker
    - os: linux
      env: BASE_IMAGE=arm64v8/alpine QEMU_ARCH=aarch64 DOCKERFILE="Dockerfile.alpine"
      services:
        - docker
    - os: linux
      env: BASE_IMAGE=library/debian QEMU_ARCH=x86_64 DOCKERFILE="Dockerfile.debian"
      services:
        - docker
    - os: linux
      env: BASE_IMAGE=arm32v7/debian QEMU_ARCH=arm DOCKERFILE="Dockerfile.debian"
      services:
        - docker
    - os: linux
      env: BASE_IMAGE=arm64v8/debian QEMU_ARCH=aarch64 DOCKERFILE="Dockerfile.debian"
      services:
        - docker

before_script:
  # linux
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sudo apt-get --yes --no-install-recommends install binfmt-support qemu-user-static ; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then docker run --rm --privileged multiarch/qemu-user-static:register --reset ; fi

  # macos
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then npm install -g prebuild ; fi

  # windows
  - if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then npm install -g prebuild ; fi

script:
  # linux
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then docker build -f .prebuild/$DOCKERFILE --build-arg BASE_IMAGE=${BASE_IMAGE} --build-arg QEMU_ARCH=${QEMU_ARCH} -t multiarch-build . ; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then docker run --rm -v $(pwd):/node-pty multiarch-build ; fi

  # macos
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then prebuild --all ; fi

  # windows - older versions of node to not work - only supporting Node.js 10+
  - if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then prebuild -t 10.0.0 -t 11.0.0 -t 12.0.0 --include-regex "\.(node|exe|dll|pdb)$" ; fi
  - if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then prebuild -a ia32 -t 10.0.0 -t 11.0.0 -t 12.0.0 --include-regex "\.(node|exe|dll|pdb)$" ; fi
  - if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then prebuild -t 4.0.0 -t 4.0.4 -t 5.0.0 -r electron --include-regex "\.(node|exe|dll|pdb)$" ; fi
  - if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then prebuild -a ia32 -t 4.0.0 -t 4.0.4 -t 5.0.0 -r electron --include-regex "\.(node|exe|dll|pdb)$" ; fi

deploy:
  provider: releases
  api_key:
    secure: C58j8hbP3nb3HRahErbfhKVWvqD7+sv9jz8HBq36jrM9gR7Gyydo4CZg3lEBen3Qy0qpfd0em5XEmtKBSGCl+x+ruavb3VcVTdBTdy1KVZExiY8nNT+JLlUFp7SOHozCSuxf6iau+eP6bO9rAZzaHbYp0yNv+7r89gXNRzEfcJkoQi/TDwV62flJcRHLVZI7PfSC3q/BrxryWonK+TaDUx6ksyaQSJoauxBQ2+y50OEMYFAwfUnIVeBqV9gu7xKpeydbLwIWXBJ7ApuyEarrPXbUx23Wuau7i3hZHElfSW2vPIKEUDWuPaYqzNX9VkRPk736kg5jyspEZ9zj/xxVefqb/Z64Wp04vohftPCMdAOLi13ZnRdQY0G6hBjJvcmQr8oBZdIndrDulvA3lU+8VwYQ9aAi5xn3+zF7qQfTbpLBNXhlZzUOznrmcJh5IydK2sm8SEHKd9feUt3OLFkMkyaFK+ESIEWdjy0hDhIaGRXKQlfcEtNBt2L8rvuOzI4T0ZXC9UnMKdMK7MAOIbW8ht+ziZNE4S7nyqw7CaLyxDf/tr7HIVOI6ztk5CY1If+Ffw3BBnmyMjNhc/40EXK5bItqrHmIWkC9H7sfl8vKs3jp6BeHOwsuTakZon7vRmwMXFsFrOFwLteBAfB0rpI1n54QYfKLa7JjQaHhk9cUf3E=
  file_glob: true
  file: prebuilds/*.tar.gz
  skip_cleanup: true
  on:
    repo: oznu/node-pty-prebuilt-multiarch
    tags: true
